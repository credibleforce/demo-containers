name: Build & Push Changed Containers

on:
  push:
    branches: [ main ]
    paths:
      - '*/Dockerfile'
      - '*/**'
      - '.github/workflows/build-push-multi.yaml'
  workflow_dispatch:
    inputs:
      force_build_all:
        description: 'Force build all containers (ignore changes)'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      images_json: ${{ steps.discover.outputs.images_json }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for git diff

      - id: discover
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          entries=()
          force_all="${{ github.event.inputs.force_build_all }}"

          # Get the previous commit to compare against
          if [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, compare with previous commit
            if [[ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
              prev_commit="${{ github.event.before }}"
            else
              # First commit or force push - build all
              prev_commit=""
            fi
          else
            # For workflow_dispatch, compare with HEAD~1
            prev_commit="HEAD~1"
          fi

          # Look for top-level dirs that contain a Dockerfile
          for df in */Dockerfile; do
            dir="${df%%/*}"
            should_build=false

            # slug: lowercase, replace illegal chars w '-', trim leading/trailing '-'
            slug="$(echo "$dir" \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/[^a-z0-9._-]+/-/g; s/^-+|-+$//g')"

            if [[ "$force_all" == "true" ]]; then
              echo "Force building all containers - including $dir"
              should_build=true
            elif [[ -z "$prev_commit" ]]; then
              echo "No previous commit found - building all containers including $dir"
              should_build=true
            else
              # Check if any files in this directory have changed
              changed_files=$(git diff --name-only "$prev_commit" HEAD -- "$dir/" || true)
              
              if [[ -n "$changed_files" ]]; then
                echo "Changes detected in $dir:"
                echo "$changed_files" | sed 's/^/  /'
                should_build=true
              else
                echo "No changes in $dir - skipping"
              fi
            fi

            if [[ "$should_build" == "true" ]]; then
              entries+=("{\"name\":\"$slug\",\"path\":\"$dir\"}")
            fi
          done

          # Also check if the workflow file itself changed - if so, build all
          if [[ -n "$prev_commit" ]] && [[ "$force_all" != "true" ]]; then
            workflow_changed=$(git diff --name-only "$prev_commit" HEAD -- .github/workflows/build-push-multi.yaml || true)
            if [[ -n "$workflow_changed" ]]; then
              echo "Workflow file changed - rebuilding all containers"
              entries=()
              for df in */Dockerfile; do
                dir="${df%%/*}"
                slug="$(echo "$dir" \
                  | tr '[:upper:]' '[:lower:]' \
                  | sed -E 's/[^a-z0-9._-]+/-/g; s/^-+|-+$//g')"
                entries+=("{\"name\":\"$slug\",\"path\":\"$dir\"}")
              done
            fi
          fi

          if (( ${#entries[@]} == 0 )); then
            echo "No containers need to be built."
            echo "images_json=[]" >>"$GITHUB_OUTPUT"
            exit 0
          fi

          # Compact JSON (single line) so $GITHUB_OUTPUT parsing is happy.
          json=$(printf '%s\n' "${entries[@]}" | jq -c -s '.')

          echo "Containers to build: $json"
          echo "images_json=$json" >>"$GITHUB_OUTPUT"

  build:
    needs: discover
    if: ${{ needs.discover.outputs.images_json != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover.outputs.images_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: vars
        run: echo "sha_short=${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"

      - name: Build & Push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.name }}:latest
            ${{ env.REGISTRY }}/${{ matrix.name }}:${{ steps.vars.outputs.sha_short }}

      - name: Image digest
        run: "echo \"Pushed digest: ${{ steps.build-push.outputs.digest }}\""
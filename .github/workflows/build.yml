name: Build & Push All Containers

on:
  push:
    branches: [ main ]
    paths:
      - '*/Dockerfile'
      - '*/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      images_json: ${{ steps.discover.outputs.images_json }}
    steps:
      - uses: actions/checkout@v4

      - id: discover
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          entries=()

          # Look for top-level dirs that contain a Dockerfile
          for df in */Dockerfile; do
            dir="${df%%/*}"

            # slug: lowercase, replace illegal chars w '-', trim leading/trailing '-'
            slug="$(echo "$dir" \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/[^a-z0-9._-]+/-/g; s/^-+|-+$//g')"

            entries+=("{\"name\":\"$slug\",\"path\":\"$dir\"}")
          done

          if (( ${#entries[@]} == 0 )); then
            echo "No container directories found with Dockerfile."
            echo "images_json=[]" >>"$GITHUB_OUTPUT"
            exit 0
          fi

          # Compact JSON (single line) so $GITHUB_OUTPUT parsing is happy.
          json=$(printf '%s\n' "${entries[@]}" | jq -c -s '.')

          echo "Discovered images: $json"
          echo "images_json=$json" >>"$GITHUB_OUTPUT"

  build:
    needs: discover
    if: ${{ needs.discover.outputs.images_json != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover.outputs.images_json) }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: vars
        run: "echo \"sha_short=${GITHUB_SHA::7}\" >> \"$GITHUB_OUTPUT\""

      - name: Build & Push
        id: build-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ matrix.name }}:latest
            ${{ env.REGISTRY }}/${{ matrix.name }}:${{ steps.vars.outputs.sha_short }}

      - name: Image digest
        run: "echo \"Pushed digest: ${{ steps.build-push.outputs.digest }}\""